name: Deploy to Vercel
description: Deploy to Vercel
inputs:
  VERCEL_PROJECT_ID:
    description: Vercel project ID
    required: true
  VERCEL_TOKEN:
    description: Vercel token
    required: true
  ENVIRONMENT:
    description: Environment
    required: true
  ALIAS_DOMAIN_URL:
    description: Alias domain
    required: false

runs:
  using: composite
  steps:
    - name: echo token
      run: echo "${{ VERCEL_TOKEN }}"

    - name: Replace the vercel.dr.json with vercel.json
      run: cp -f vercel.dr.json vercel.json
      shell: bash

    - name: Install Vercel CLI
      run: npm install -g vercel
      shell: bash

    - name: Setup Vercel project
      run: |
        mkdir -p .vercel
        echo '{
          "projectId": "${{ inputs.VERCEL_PROJECT_ID }}"
        }' > .vercel/project.json
      shell: bash

    - name: Pull Vercel project
      shell: bash
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
      run: |
        vercel pull --yes --token=$VERCEL_TOKEN

    - name: Create deployment.txt file
      run: echo "This is being published from Vercel" > deployment.txt
      shell: bash

    - name: Deploy to Vercel (Staging)
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
        ALIAS_DOMAIN_URL: ${{ inputs.ALIAS_DOMAIN_URL }}
      if: ${{ inputs.ENVIRONMENT == 'Staging' }} || ${{ inputs.ENVIRONMENT == 'Preview' }}
      shell: bash
      run: |
        vercel build --yes --token=$VERCEL_TOKEN
        url="$(vercel deploy --prebuilt --token=$VERCEL_TOKEN)"
        vercel alias "$url" $ALIAS_DOMAIN_URL --token=$VERCEL_TOKEN

    - name: Deploy to Vercel (Production)
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
        ALIAS_DOMAIN_URL: ${{ inputs.ALIAS_DOMAIN_URL }}
      if: ${{ inputs.ENVIRONMENT == 'Production' }}
      shell: bash
      run: |
        vercel build --yes --prod --token=$VERCEL_TOKEN
        url="$(vercel deploy --prod --prebuilt --token=$VERCEL_TOKEN)"
        vercel alias "$url" $ALIAS_DOMAIN_URL --token=$VERCEL_TOKEN